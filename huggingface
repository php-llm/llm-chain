#!/usr/bin/env php
<?php

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;
use Symfony\Component\Process\Process;

require_once __DIR__.'/vendor/autoload.php';

$app = (new SingleCommandApplication('HuggingFace Example Runner'))
    ->setDescription('Runs all HuggingFace examples in folder examples/huggingface/')
    ->setCode(function (InputInterface $input, ConsoleOutput $output) {
        $io = new SymfonyStyle($input, $output);
        $io->title('HuggingFace Examples');

        $examples = (new Finder())
            ->in(__DIR__.'/examples/huggingface')
            ->name('*.php')
            ->sortByName()
            ->files();

        /** @var array{example: SplFileInfo, process: Process} $exampleRuns */
        $exampleRuns = [];
        foreach ($examples as $example) {
            $exampleRuns[] = [
                'example' => $example,
                'process' => $process = new Process(['php', $example->getRealPath()]),
            ];
            $process->start();
        }

        $examplesRunning = fn () => array_reduce($exampleRuns, fn ($running, $example) => $running || $example['process']->isRunning(), false);
        $examplesSuccessful = fn () => array_reduce($exampleRuns, fn ($successful, $example) => $successful && $example['process']->isSuccessful(), true);

        $section = $output->section();
        $renderTable = function () use ($exampleRuns, $section) {
            $section->clear();
            $table = new Table($section);
            $table->setHeaders(['Example', 'State', 'Output']);
            foreach ($exampleRuns as $run) {
                /** @var SplFileInfo $example */
                /** @var Process $process */
                ['example' => $example, 'process' => $process] = $run;

                $output = str_replace(PHP_EOL, ' ', $process->getOutput());
                $output = strlen($output) <= 100 ? $output : substr($output, 0, 100).'...';
                $emptyOutput = 0 === strlen(trim($output));

                $state = 'Running';
                if ($process->isTerminated()) {
                    $success = $process->isSuccessful() && !$emptyOutput;
                    $state = $success ? '<info>Finished</info>'
                        : (1 === $run['process']->getExitCode() || $emptyOutput ? '<error>Failed</error>' : '<comment>Skipped</comment>');
                }

                $table->addRow([$example->getFilename(), $state, $output]);
            }
            $table->render();
        };

        while ($examplesRunning()) {
            $renderTable();
            sleep(1);
        }

        $renderTable();

        $io->newLine();
        
        // Count successful examples
        $successCount = array_reduce($exampleRuns, function ($count, $example) {
            if ($example['process']->isSuccessful() && strlen(trim($example['process']->getOutput())) > 0) {
                return $count + 1;
            }
            return $count;
        }, 0);
        
        $totalCount = count($exampleRuns);
        
        if ($successCount < $totalCount) {
            $io->warning("$successCount out of $totalCount examples ran successfully. Some examples may have failed due to API limits or unavailable models.");
        } else {
            $io->success("All $totalCount examples ran successfully!");
        }

        // Display detailed error information for failed examples
        foreach ($exampleRuns as $run) {
            if (!$run['process']->isSuccessful()) {
                $io->section('Error in ' . $run['example']->getFilename());
                $io->text($run['process']->getErrorOutput());
            }
        }

        return Command::SUCCESS;
    })
    ->run();
